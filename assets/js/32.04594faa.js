(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{679:function(s,a,t){"use strict";t.r(a);var e=t(74),v=Object(e.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"redis复制配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redis复制配置"}},[s._v("#")]),s._v(" Redis复制配置")]),s._v(" "),a("p",[s._v("在分布式系统中为了解决单点问题，通常会把数据复制多个副本部署到其他机器，满足故障恢复和负载均衡等需求。Redis也是如此，它为我们提供了复制功能，实现了相同数据的多个Redis副本。复制功能是高可用Redis的基础，的哨兵和集群都是在复制的基础上实现高可用的。")]),s._v(" "),a("h3",{attrs:{id:"建立复制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#建立复制"}},[s._v("#")]),s._v(" 建立复制")]),s._v(" "),a("p",[s._v("参与复制的Redis实例划分为主节点（"),a("code",[s._v("master")]),s._v("）和从节点（"),a("code",[s._v("slave")]),s._v("）。"),a("strong",[s._v("默认情况下，Redis都是主节点。每个从节点只能有一个主节点，而主节点可以同时具有多个从节点。")])]),s._v(" "),a("p",[s._v("建立复制的方式有以下三种：")]),s._v(" "),a("ul",[a("li",[s._v("在配置文件中加入"),a("code",[s._v("slaveof {masterHost} {masterPort}")]),s._v(" 随Redis启动生效。")]),s._v(" "),a("li",[s._v("在redis-server启动命令后加入"),a("code",[s._v("--slaveof {masterHost} {masterPort}")]),s._v("生效。")]),s._v(" "),a("li",[s._v("直接使用命令："),a("code",[s._v("slaveof {masterHost} {masterPort}")]),s._v("生效。")])]),s._v(" "),a("p",[s._v("综上所述，"),a("code",[s._v("slaveof")]),s._v("命令在使用时，可以运行期动态配置，也可以提前写到配置文件中。例如本地启动两个端口为6379和6380的Redis节点，在"),a("code",[s._v("127.0.0.1：6380")]),s._v("执行如下命令：")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:638"),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("0")]),s._v(">")]),s._v("slaveof "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6379")]),s._v("\n")])])]),a("p",[a("code",[s._v("slaveof")]),s._v("配置都是在从节点发起，这时6379作为主节点，6380作为从节点。复制关系建立后执行如下命令测试：")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:637"),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("9")]),s._v(">")]),s._v("set hello redis\nOK\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:637"),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("9")]),s._v(">")]),s._v("get hello\n"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"redis"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:638"),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("0")]),s._v(">")]),s._v("get hello\n"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"redis"')]),s._v("\n")])])]),a("p",[a("code",[s._v("slaveof")]),s._v("本身是异步命令，执行"),a("code",[s._v("slaveof")]),s._v("命令时，节点只保存主节点信息后返回，后续复制流程在节点内部异步执行，主从节点复制成功建立后，可以使用"),a("code",[s._v("info replication")]),s._v("命令查看复制相关状态，如下所示。")]),s._v(" "),a("p",[s._v("主节点6379复制状态信息：")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:637"),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("9")]),s._v(">")]),s._v("info replication\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Replication")]),s._v("\nrole:master\nconnected_slaves:1\nslave0:ip"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1,port"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6379")]),s._v(",state"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("online,offset"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("43")]),s._v(",lag"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("\n")])])]),a("p",[s._v("从节点6380复制状态信息：")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:638"),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("0")]),s._v(">")]),s._v("info replication\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Replication")]),s._v("\nrole:slave\nmaster_host:127.0.0.1\nmaster_port:6380\nmaster_link_status:up\nmaster_last_io_seconds_ago:4\nmaster_sync_in_progress:0\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n")])])]),a("h3",{attrs:{id:"断开复制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#断开复制"}},[s._v("#")]),s._v(" 断开复制")]),s._v(" "),a("p",[a("code",[s._v("slaveof")]),s._v("命令不但可以建立复制，还可以在从节点执行"),a("code",[s._v("slaveof no one")]),s._v("来断开与主节点复制关系。例如在6380节点上执行"),a("code",[s._v("slaveof no one")]),s._v("来断开复制。")]),s._v(" "),a("p",[s._v("断开复制主要流程：")]),s._v(" "),a("ul",[a("li",[s._v("断开与主节点复制关系。")]),s._v(" "),a("li",[s._v("从节点晋升为主节点。")])]),s._v(" "),a("p",[s._v("从节点断开复制后并不会抛弃原有数据，只是无法再获取主节点上的数据变化。\n通过"),a("code",[s._v("slaveof")]),s._v("命令还可以实现切主操作，所谓切主是指把当前从节点对主节点的复制切换到另一个主节点。执行"),a("code",[s._v("slaveof {newMasterIp} {newMasterPort}")]),s._v("命令即可。")]),s._v(" "),a("p",[s._v("切主操作流程如下：")]),s._v(" "),a("ul",[a("li",[s._v("断开与旧主节点复制关系。")]),s._v(" "),a("li",[s._v("与新主节点建立复制关系。")]),s._v(" "),a("li",[s._v("删除从节点当前所有数据。")]),s._v(" "),a("li",[s._v("对新主节点进行复制操作。")])]),s._v(" "),a("p",[a("strong",[s._v("切主后从节点会清空之前所有的数据，线上人工操作时小心"),a("code",[s._v("slaveof")]),s._v("在错误的节点上执行或者指向错误的主节点。")])]),s._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[s._v("提醒")]),s._v(" "),a("p",[s._v("对于数据比较重要的节点，主节点会通过设置"),a("code",[s._v("requirepass")]),s._v("参数进行密码验证，这时所有的客户端访问必须使用"),a("code",[s._v("auth")]),s._v("命令实行校验。从节点与主节点的复制连接是通过一个特殊标识的客户端来完成，因此需要配置从节点的"),a("code",[s._v("masterauth")]),s._v("参数与主节点密码保持一致，这样从节点才可以正确地连接到主节点并发起复制流程。")]),s._v(" "),a("p",[s._v("默认情况下，从节点使用slave-read-only=yes配置为只读模式。由于复制只能从主节点到从节点，对于从节点的任何修改主节点都无法感知，修改从节点会造成主从数据不一致。因此建议线上不要修改从节点的只读模式。")])]),s._v(" "),a("p",[s._v("主从节点一般部署在不同机器上，复制时的网络延迟就成为需要考虑的问题，Redis为我们提供了"),a("code",[s._v("repl-disable-tcp-nodelay")]),s._v("参数用于控制是否关闭"),a("code",[s._v("TCP_NODELAY")]),s._v("，默认关闭，说明如下：")]),s._v(" "),a("ul",[a("li",[s._v("当关闭时，主节点产生的命令数据无论大小都会及时地发送给从节点，这样主从之间延迟会变小，但增加了网络带宽的消耗。适用于主从之间的网络环境良好的场景，如同机架或同机房部署。")]),s._v(" "),a("li",[s._v("当开启时，主节点会合并较小的TCP数据包从而节省带宽。默认发送时间间隔取决于Linux的内核，一般默认为40毫秒。这种配置节省了带宽但增大主从之间的延迟。适用于主从网络环境复杂或带宽紧张的场景，如跨机房部署。")])]),s._v(" "),a("h2",{attrs:{id:"redis拓扑结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redis拓扑结构"}},[s._v("#")]),s._v(" Redis拓扑结构")]),s._v(" "),a("p",[s._v("Redis的复制拓扑结构可以支持单层或多层复制关系，根据拓扑复杂性可以分为以下三种：一主一从、一主多从、树状主从结构。")]),s._v(" "),a("h3",{attrs:{id:"一主一从结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一主一从结构"}},[s._v("#")]),s._v(" 一主一从结构")]),s._v(" "),a("p",[s._v("一主一从结构是最简单的复制拓扑结构，用于主节点出现宕机时从节点提供故障转移支持（如图6-4所示）。当应用写命令并发量较高且需要持久化时，可以只在从节点上开启AOF，这样既保证数据安全性同时也避免了持久化对主节点的性能干扰。")]),s._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[s._v("警告")]),s._v(" "),a("p",[s._v("需要注意的是，当主点关闭持久化功能时，如果主节点脱机要避免自动重启操作。因为主节点之前没有开启持久化功能自动重启后数据集为空，这时从节点如果继续复制主节点会导致从节点数据也被清空的情况，丧失了持久化的意义。安全的做法是在从节点上执行\n"),a("code",[s._v("slaveof no one")]),s._v("断开与主节点的复制关系，再重启主节点从而避免这一问题。")])]),s._v(" "),a("h3",{attrs:{id:"一主多从结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一主多从结构"}},[s._v("#")]),s._v(" 一主多从结构")]),s._v(" "),a("p",[s._v("一主多从结构（又称为星形拓扑结构）使得应用端可以利用多个从节点实现读写分离。")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("对于读占比较大的场景，可以把读命令发送到从节点来分担主节点压力。")])]),s._v(" "),a("li",[a("p",[s._v("在日常开发中如果需要执行一些比较耗时的读命令，如：keys、sort等，可以在其中一台从节点上执行，防止慢查询对主节点造成阻塞从而影响线上服务的稳定性。")])])]),s._v(" "),a("p",[s._v("对于写并发量较高的场景，多个从节点会导致主节点写命令的多次发送从而过度消耗网络带宽，同时也加重了主节点的负载影响服务稳定性。")]),s._v(" "),a("h3",{attrs:{id:"树状主从结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#树状主从结构"}},[s._v("#")]),s._v(" 树状主从结构")]),s._v(" "),a("p",[s._v("树状主从结构（又称为树状拓扑结构）使得从节点不但可以复制主节点数据，同时可以作为其他从节点的主节点继续向下层复制。通过引入复制中间层，可以有效降低主节点负载和需要传送给从节点的数据量。"),a("strong",[s._v("当主节点需要挂载多个从节点时为了避免对主节点的性能干扰，可以采用树状主从结构降低主节点压力。")])]),s._v(" "),a("h2",{attrs:{id:"复制过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#复制过程"}},[s._v("#")]),s._v(" 复制过程")]),s._v(" "),a("p",[s._v("复制过程分为6个步骤：")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("保存主节点（master）信息：执行"),a("code",[s._v("slaveof")]),s._v("后从节点只保存主节点的地址信息便直接返回，这时建立复制流程还没有开始。")])]),s._v(" "),a("li",[a("p",[s._v("主从建立socket连接：从节点（slave）内部通过每秒运行的定时任务维护复制相关逻辑，当定时任务发现存在新的主节点后，会尝试与该节点建立网络连接。从节点会建立一个socket套接字，专门用于接受主节点发送的复制命令。如果从节点无法建立连接，定时任务会无限重试直到连接成功或者执行"),a("code",[s._v("slaveof no one")]),s._v("取消复制")])]),s._v(" "),a("li",[a("p",[s._v("发送"),a("code",[s._v("ping")]),s._v("命令：连接建立成功后从节点发送ping请求进行首次通信，ping请求主要目的一是检测主从之间网络套接字是否可用，二是检测主节点当前是否可接受处理命令。如果发送ping命令后，从节点没有收到主节点的"),a("code",[s._v("pong")]),s._v("回复或者超时，比如网络超时或者主节点正在阻塞无法响应命令，从节点会断开复制连接，下次定时任务会发起重连")])]),s._v(" "),a("li",[a("p",[s._v("权限验证。如果主节点设置了requirepass参数，则需要密码验证，从节点必须配置"),a("code",[s._v("masterauth")]),s._v("参数保证与主节点相同的密码才能通过验证；如果验证失败复制将终止，从节点重新发起复制流程。")])]),s._v(" "),a("li",[a("p",[s._v("同步数据集。主从复制连接正常通信后，对于首次建立复制的场景，主节点会把持有的数据全部发送给从节点，这部分操作是耗时最长的步骤。Redis在2.8版本以后采用新复制命令"),a("code",[s._v("psync")]),s._v("进行数据同步，原来的"),a("code",[s._v("sync")]),s._v("命令依然支持，保证新旧版本的兼容性。新版同步划分两种情况：全量同步和部分同步。")])]),s._v(" "),a("li",[a("p",[s._v("命令持续复制。当主节点把当前的数据同步给从节点后，便完成了复制的建立流程。接下来主节点会持续地把写命令发送给从节点，保证主从数据一致性。")])])]),s._v(" "),a("h2",{attrs:{id:"数据同步方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据同步方式"}},[s._v("#")]),s._v(" 数据同步方式")]),s._v(" "),a("p",[s._v("Redis在2.8及以上版本使用"),a("code",[s._v("psync")]),s._v("命令完成主从数据同步，同步过程分为：全量复制和部分复制。")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("全量复制：一般用于初次复制场景，Redis早期支持的复制功能只有全量复制，它会把主节点全部数据一次性发送给从节点，当数据量较大时，会对主从节点和网络造成很大的开销。")])]),s._v(" "),a("li",[a("p",[s._v("部分复制：用于处理在主从复制中因网络闪断等原因造成的数据丢失场景，当从节点再次连上主节点后，如果条件允许，主节点会补发丢失数据给从节点。因为补发的数据远远小于全量数据，可以有效避免全量复制的过高开销。")])])]),s._v(" "),a("p",[a("strong",[s._v("部分复制是对老版复制的重大优化，有效避免了不必要的全量复制操作。因此当使用复制功能时，尽量采用2.8以上版本的Redis。")])])])}),[],!1,null,null,null);a.default=v.exports}}]);