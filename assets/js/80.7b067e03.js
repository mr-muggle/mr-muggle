(window.webpackJsonp=window.webpackJsonp||[]).push([[80],{731:function(t,a,r){"use strict";r.r(a);var s=r(74),n=Object(s.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"正向代理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正向代理"}},[t._v("#")]),t._v(" 正向代理")]),t._v(" "),a("p",[t._v("正向代理：如果把局域网外的 Internet 想象成一个巨大的资源库，则局域网中的客户端要访问 Internet ，则需要通过代理服务器来访问，这种代理服务就称为正向代理。")]),t._v(" "),a("p",[a("img",{attrs:{src:"/%E6%9C%8D%E5%8A%A1%E5%99%A8/nginx/%E6%AD%A3%E5%90%91%E4%BB%A3%E7%90%86.png",alt:"正向代理"}})]),t._v(" "),a("h2",{attrs:{id:"反向代理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#反向代理"}},[t._v("#")]),t._v(" 反向代理")]),t._v(" "),a("p",[t._v("反向代理，其实客户端对代理是无感知的，因为客户端不需要任何配置就可以访问，我们只需要将请求发送到反向代理服务器，由反向代理服务器去选择目标服务器获取数据后，在返回给客户端，此时反向代理服务器和目标服务器对外就是一个服务器，暴露的是代理服务器\n地址，隐藏了真实服务器 IP 地址。")]),t._v(" "),a("p",[a("img",{attrs:{src:"/%E6%9C%8D%E5%8A%A1%E5%99%A8/nginx/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86.png",alt:"反向代理"}})]),t._v(" "),a("h2",{attrs:{id:"负载均衡"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#负载均衡"}},[t._v("#")]),t._v(" 负载均衡")]),t._v(" "),a("p",[t._v("客户端发送多个请求到服务器，服务器处理请求，有一些可能要与数据库进行交互，服务器处理完毕后，再将结果返回给客户端。")]),t._v(" "),a("p",[t._v("这种架构模式对于早期的系统相对单一，并发请求相对较少的情况下是比较适合的，成本也低。但是随着信息数量的不断增长，访问量和数据量的飞速增长，以及系统业务的复杂度增加，这种架构会造成服务器相应客户端的请求日益缓慢，并发量特别大的时候，还容易造成服务器直接崩溃。很明显这是由于服务器性能的瓶颈造成的问题，那么如何解决这种情况呢？")]),t._v(" "),a("p",[t._v("我们首先想到的可能是升级服务器的配置，比如提高CPU执行频率，加大内存等提高机器的物理性能来解决此问题，但是我们知道摩尔定律的日益失效，硬件的性能提升已经不能满足日益提升的需求了。最明显的一个例子，天猫双十一当天，某个热销商品的瞬时访问量是极其庞大的，那么类似上面的系统架构，将机器都增加到现有的顶级物理配置，都是不能够满足需求的。那么怎么办呢？")]),t._v(" "),a("p",[t._v("上面的分析我们去掉了增加服务器物理配置来解决问题的办法，也就是说纵向解决问题的办法行不通了，那么横向增加服务器的数量呢？这时候集群的概念产生了，单个服务器解决不了，我们增加服务器的数量，然后将请求分发到各个服务器上，将原先请求集中到单个服务器上的情况改为将请求分发到多个服务器上，将负载分发到不同的服务器，也就是我们所说的负载均衡。")]),t._v(" "),a("p",[a("img",{attrs:{src:"/%E6%9C%8D%E5%8A%A1%E5%99%A8/nginx/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1.png",alt:"负载均衡"}})]),t._v(" "),a("h2",{attrs:{id:"动静分离"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#动静分离"}},[t._v("#")]),t._v(" 动静分离")]),t._v(" "),a("p",[t._v("Nginx动静分离简单来说就是把动态跟静态请求分开，不能理解成只是单纯的把动态页面和静态页面物理分离。通过这种方式，可以提高服务访问速度，降低原来单个服务器的压力。")]),t._v(" "),a("p",[a("img",{attrs:{src:"/%E6%9C%8D%E5%8A%A1%E5%99%A8/nginx/%E5%8A%A8%E9%9D%99%E5%88%86%E7%A6%BB.png",alt:"动静分离"}})])])}),[],!1,null,null,null);a.default=n.exports}}]);