(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{698:function(t,s,a){"use strict";a.r(s);var n=a(74),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"redis是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redis是什么"}},[t._v("#")]),t._v(" Redis是什么")]),t._v(" "),s("p",[t._v("Redis 是 C 语言开发的一个开源的（遵从 BSD 协议）高性能键值对（key-value）的内存数据库，可以用作数据库、缓存、消息中间件等。")]),t._v(" "),s("p",[t._v("Redis 作为一个内存数据库，其主要有以下几个特点：")]),t._v(" "),s("ul",[s("li",[t._v("性能优秀，数据在内存中，读写速度非常快，支持并发 10W QPS。")]),t._v(" "),s("li",[t._v("单进程单线程，是线程安全的，采用 IO 多路复用机制。")]),t._v(" "),s("li",[t._v("丰富的数据类型，支持字符串（strings）、散列（hashes）、列表（lists）、集合（sets）、有序集合（sorted sets）等。")]),t._v(" "),s("li",[t._v("支持数据持久化，可以将内存中数据保存在磁盘中，重启时加载。")]),t._v(" "),s("li",[t._v("支持主从复制，哨兵，高可用。")]),t._v(" "),s("li",[t._v("可以用作分布式锁。")]),t._v(" "),s("li",[t._v("可以作为消息中间件使用，支持发布订阅。")])]),t._v(" "),s("h2",{attrs:{id:"redis-支持五种数据类型-那你能简单说下这五种数据类型吗"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redis-支持五种数据类型-那你能简单说下这五种数据类型吗"}},[t._v("#")]),t._v(" Redis 支持五种数据类型，那你能简单说下这五种数据类型吗？")]),t._v(" "),s("p",[t._v("在Redis 内部使用一个 redisObject 对象来表示所有的 key 和 value。type 表示一个 value 对象具体是何种数据类型，encoding 是不同数据类型在 Redis 内部的存储方式。下面我简单说下 5 种数据类型：")]),t._v(" "),s("ul",[s("li",[s("p",[s("strong",[t._v("String")]),t._v(" 是 Redis 最基本的类型，可以理解成与 Memcached一模一样的类型，一个 Key 对应一个 Value。Value 不仅是 String，也可以是数字。String 类型是二进制安全的，意思是 Redis 的 String 类型可以包含任何数据，比如 jpg 图片或者序列化的对象。String 类型的值最大能存储 512M。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("Hash")]),t._v(" 是一个键值（key-value）的集合。Redis 的 Hash 是一个 String 的 Key 和 Value 的映射表，Hash 特别适合存储对象。常用命令：hget，hset，hgetall 等。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("List")]),t._v(" 列表是简单的字符串列表，按照插入顺序排序。可以添加一个元素到列表的头部（左边）或者尾部（右边） 常用命令：lpush、rpush、lpop、rpop、lrange（获取列表片段）等。")]),t._v(" "),s("p",[t._v("应用场景：List 应用场景非常多，也是 Redis 最重要的数据结构之一，比如 Twitter 的关注列表，粉丝列表都可以用 List 结构来实现。")]),t._v(" "),s("p",[t._v("数据结构：List 就是链表，可以用来当消息队列用。Redis 提供了 List 的 Push 和 Pop 操作，还提供了操作某一段的 API，可以直接查询或者删除某一段的元素。")]),t._v(" "),s("p",[t._v("实现方式：Redis List 的是实现是一个双向链表，既可以支持反向查找和遍历，更方便操作，不过带来了额外的内存开销。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("Set")]),t._v(" 是 String 类型的无序集合。集合是通过 hashtable 实现的。Set 中的元素是没有顺序的，而且是没有重复的。常用命令：sdd、spop、smembers、sunion 等。")]),t._v(" "),s("p",[t._v("应用场景：Redis Set 对外提供的功能和 List 一样是一个列表，特殊之处在于 Set 是自动去重的，而且 Set 提供了判断某个成员是否在一个 Set 集合中。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("Zset")]),t._v(" 和 Set 一样是 String 类型元素的集合，且不允许重复的元素。常用命令：zadd、zrange、zrem、zcard 等。")]),t._v(" "),s("p",[t._v("使用场景：Sorted Set 可以通过用户额外提供一个优先级（score）的参数来为成员排序，并且是插入有序的，即自动排序。")]),t._v(" "),s("p",[t._v("当你需要一个有序的并且不重复的集合列表，那么可以选择 Sorted Set 结构。")]),t._v(" "),s("p",[t._v("和 Set 相比，Sorted Set关联了一个 Double 类型权重的参数 Score，使得集合中的元素能够按照 Score 进行有序排列，Redis 正是通过分数来为集合中的成员进行从小到大的排序。")]),t._v(" "),s("p",[t._v("实现方式：Redis Sorted Set 的内部使用 HashMap 和跳跃表（skipList）来保证数据的存储和有序，HashMap 里放的是成员到 Score 的映射。")]),t._v(" "),s("p",[t._v("而跳跃表里存放的是所有的成员，排序依据是 HashMap 里存的 Score，使用跳跃表的结构可以获得比较高的查找效率，并且在实现上比较简单。")])])]),t._v(" "),s("h2",{attrs:{id:"redis缓存的使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redis缓存的使用"}},[t._v("#")]),t._v(" Redis缓存的使用")]),t._v(" "),s("p",[t._v("我是结合 Spring Boot 使用的。一般有两种方式，一种是直接通过 RedisTemplate 来使用，另一种是使用 Spring Cache 集成 Redis（也就是注解的方式）。")]),t._v(" "),s("ol",[s("li",[t._v("通过 RedisTemplate 来使用")])]),t._v(" "),s("div",{staticClass:"language-xml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-xml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("dependencies")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("dependency")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("groupId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("org.springframework.boot"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("groupId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("artifactId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("spring-boot-starter-data-redis"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("artifactId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("dependency")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("dependency")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("groupId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("org.apache.commons"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("groupId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("artifactId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("commons-pool2"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("artifactId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("dependency")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("dependency")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("groupId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("org.springframework.boot"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("groupId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("artifactId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("spring-boot-starter-web"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("artifactId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("dependency")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("dependency")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("groupId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("org.springframework.session"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("groupId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("artifactId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("spring-session-data-redis"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("artifactId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("dependency")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("dependency")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("groupId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("org.projectlombok"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("groupId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("artifactId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("lombok"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("artifactId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("optional")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("true"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("optional")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("dependency")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("dependency")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("groupId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("org.springframework.boot"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("groupId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("artifactId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("spring-boot-starter-test"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("artifactId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("scope")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("test"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("scope")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("dependency")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("dependencies")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),s("p",[s("strong",[t._v("spring-boot-starter-data-redis")]),t._v(" ：在 Spring Boot 2.x 以后底层不再使用 Jedis，而是换成了 Lettuce。")]),t._v(" "),s("p",[s("strong",[t._v("commons-pool2")]),t._v(" ：用作 Redis 连接池，如不引入启动会报错。")]),t._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[t._v("使用 Spring Cache 集成 Redis")])]),t._v(" "),s("p",[t._v("Spring Cache 具备很好的灵活性，不仅能够使用 SPEL（spring expression language）来定义缓存的 Key 和各种 Condition，还提供了开箱即用的缓存临时存储方案，也支持和主流的专业缓存如 EhCache、Redis、Guava 的集成。")]),t._v(" "),s("p",[t._v("用缓存要注意，启动类要加上一个注解开启缓存：")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@SpringBootApplication")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("exclude"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DataSourceAutoConfiguration")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@EnableCaching")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Application")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SpringApplication")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("run")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Application")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("这里的核心是三个注解：")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("@Cachable")])]),t._v(" "),s("li",[s("strong",[t._v("@CachePut")])]),t._v(" "),s("li",[s("strong",[t._v("@CacheEvict")])])]),t._v(" "),s("p",[t._v("①@Cacheable")]),t._v(" "),s("p",[t._v("根据方法的请求参数对其结果进行缓存：\nKey：缓存的 Key，可以为空，如果指定要按照 SPEL 表达式编写，如果不指定，则按照方法的所有参数进行组合。\nValue：缓存的名称，必须指定至少一个（如 @Cacheable (value='user')或者 @Cacheable(value={'user1','user2'})）\nCondition：缓存的条件，可以为空，使用 SPEL 编写，返回 true 或者 false，只有为 true 才进行缓存。")]),t._v(" "),s("p",[t._v("②@CachePut")]),t._v(" "),s("p",[t._v("根据方法的请求参数对其结果进行缓存，和 @Cacheable 不同的是，它每次都会触发真实方法的调用。参数描述见上。")]),t._v(" "),s("p",[t._v("③@CacheEvict")]),t._v(" "),s("p",[t._v("根据条件对缓存进行清空：\nKey：同上。\nValue：同上。\nCondition：同上。\nallEntries：是否清空所有缓存内容，缺省为 false，如果指定为 true，则方法调用后将立即清空所有缓存。\nbeforeInvocation：是否在方法执行前就清空，缺省为 false，如果指定为 true，则在方法还没有执行的时候就清空缓存。缺省情况下，如果方法执行抛出异常，则不会清空缓存。")]),t._v(" "),s("h2",{attrs:{id:"分布式缓存问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分布式缓存问题"}},[t._v("#")]),t._v(" 分布式缓存问题")]),t._v(" "),s("p",[t._v("缓存和数据库数据一致性问题：分布式环境下非常容易出现缓存和数据库间数据一致性问题，针对这一点，如果项目对缓存的要求是强一致性的，那么就不要使用缓存。")]),t._v(" "),s("p",[t._v("我们只能采取合适的策略来降低缓存和数据库间数据不一致的概率，而无法保证两者间的强一致性。合适的策略包括合适的缓存更新策略，更新数据库后及时更新缓存、缓存失败时增加重试机制。")]),t._v(" "),s("h3",{attrs:{id:"缓存雪崩问题处理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#缓存雪崩问题处理"}},[t._v("#")]),t._v(" 缓存雪崩问题处理")]),t._v(" "),s("p",[t._v("缓存雪崩指的是缓存在同一时间大量失效，所以后面的请求都会落到数据库上，造成数据库短时间内承受大量的请求而崩掉。")]),t._v(" "),s("p",[t._v("解决方案：")]),t._v(" "),s("p",[t._v("在原有失效时间基础上增加一个随机值，比如1~5分钟的随机，")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("setRedis（key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" time"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Math")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("random")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10000")]),t._v("）"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("这样每个缓存的过期时间重复率就会降低，集体失效概率也会大大降低。")]),t._v(" "),s("ol",[s("li",[t._v("首先环境保证redis高可用，主从+哨兵，redis cluster，避免全盘崩溃。如果 Redis 是集群部署，将热点数据均匀分布在不同的 Redis 库中也能避免全部失效。或者设置热点数据永不过期，有更新操作就更新缓存就好了")]),t._v(" "),s("li",[t._v("接着用户并发请求后，服务会先通过hystrix限流&降级，再查本地Ehcache缓存，若没有再查redis，都没有，就查MySQL。")]),t._v(" "),s("li",[t._v("最后，将MySQL中的结果写入ehcache和redis、即使 redis挂了，通过redis持久化，也能快速恢复缓存数据")])]),t._v(" "),s("h3",{attrs:{id:"缓存穿透问题处理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#缓存穿透问题处理"}},[t._v("#")]),t._v(" 缓存穿透问题处理")]),t._v(" "),s("p",[t._v("大量请求的key根本不在缓存当中，造成请求直接请求到数据库上，根本没有经过缓存这一层。")]),t._v(" "),s("p",[t._v("解决方案：")]),t._v(" "),s("p",[t._v("1.在接口层增加校验，比如用户鉴权，参数做校验，不合法的校验直接 return")]),t._v(" "),s("p",[t._v("2.使用布隆过滤器，将所有可能存在的数据哈希到一个足够大的bitmap中，一个一定不存在的数据会被这个bitmap拦截掉，从而避免了对底层存储系统的查询压力。")]),t._v(" "),s("p",[t._v("也有一个更为简单粗暴的方法，如果一个查询返回的数据为空（不管是数据不存在，还是系统故障），我们仍然把这个空结果进行缓存，但它的过期时间会很短，最长不超过五分钟。")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("list "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// key value 有效时间 时间单位    ")]),t._v("\n\tredisTemplate"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("opsForValue")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("set")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("navKey"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TimeUnit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("MINUTES")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("    \n \tredisTemplate"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("opsForValue")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("set")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("navKey"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("result"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TimeUnit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("DAYS")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h3",{attrs:{id:"缓存击穿问题处理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#缓存击穿问题处理"}},[t._v("#")]),t._v(" 缓存击穿问题处理")]),t._v(" "),s("p",[t._v("缓存击穿不同的是缓存击穿是指一个 Key 非常热点，在不停地扛着大量的请求，大并发集中对这一个点进行访问，当这个 Key 在失效的瞬间，持续的大并发直接落到了数据库上，就在这个 Key 的点上击穿了缓存。")]),t._v(" "),s("p",[t._v("解决方案：")]),t._v(" "),s("p",[t._v("设置热点数据永不过期，或者加上互斥锁就搞定了。")]),t._v(" "),s("h2",{attrs:{id:"redis-是单线程的-为什么还能这么快"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redis-是单线程的-为什么还能这么快"}},[t._v("#")]),t._v(" Redis 是单线程的，为什么还能这么快")]),t._v(" "),s("ol",[s("li",[t._v("Redis 完全基于内存，绝大部分请求是纯粹的内存操作，非常迅速，数据存在内存中，类似于 HashMap，HashMap 的优势就是查找和操作的时间复杂度是 O(1)。")]),t._v(" "),s("li",[t._v("数据结构简单，对数据操作也简单。")]),t._v(" "),s("li",[t._v("采用单线程，避免了不必要的上下文切换和竞争条件，不存在多线程导致的 CPU 切换，不用去考虑各种锁的问题，不存在加锁释放锁操作，没有死锁问题导致的性能消耗。")]),t._v(" "),s("li",[t._v("使用多路复用 IO 模型，非阻塞 IO。")])]),t._v(" "),s("h2",{attrs:{id:"redis-和-memcached-的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redis-和-memcached-的区别"}},[t._v("#")]),t._v(" Redis 和 Memcached 的区别")]),t._v(" "),s("ul",[s("li",[t._v("**存储方式上：**Memcache 会把数据全部存在内存之中，断电后会挂掉，数据不能超过内存大小。Redis 有部分数据存在硬盘上，这样能保证数据的持久性。")]),t._v(" "),s("li",[t._v("**数据支持类型上：**Memcache 对数据类型的支持简单，只支持简单的 key-value，，而 Redis 支持五种数据类型。")]),t._v(" "),s("li",[t._v("**使用底层模型不同：**它们之间底层实现方式以及与客户端之间通信的应用协议不一样。Redis 直接自己构建了 VM 机制，因为一般的系统调用系统函数的话，会浪费一定的时间去移动和请求。")]),t._v(" "),s("li",[t._v("**Value 的大小：**Redis 可以达到 1GB，而 Memcache 只有 1MB。")])]),t._v(" "),s("h2",{attrs:{id:"redis淘汰策略有哪些"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redis淘汰策略有哪些"}},[t._v("#")]),t._v(" Redis淘汰策略有哪些")]),t._v(" "),s("p",[t._v("Redis 有六种淘汰策略，如下图：")]),t._v(" "),s("p",[s("img",{attrs:{src:"/%E9%9D%A2%E8%AF%95/%E6%95%B0%E6%8D%AE%E5%BA%93/Redis/%E5%86%85%E5%AD%98%E6%B7%98%E6%B1%B0%E7%AD%96%E7%95%A5.png",alt:"Redis淘汰策略"}})]),t._v(" "),s("p",[t._v("**补充一下：**Redis 4.0 加入了 LFU（least frequency use）淘汰策略，包括 volatile-lfu 和 allkeys-lfu，通过统计访问频率，将访问频率最少，即最不经常使用的 KV 淘汰。")]),t._v(" "),s("h2",{attrs:{id:"redis持久化策略"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redis持久化策略"}},[t._v("#")]),t._v(" Redis持久化策略")]),t._v(" "),s("h3",{attrs:{id:"redis持持久化策略有哪两种"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redis持持久化策略有哪两种"}},[t._v("#")]),t._v(" Redis持持久化策略有哪两种")]),t._v(" "),s("p",[t._v("Redis 的持久化策略有两种：")]),t._v(" "),s("ul",[s("li",[t._v("**RDB：**快照形式是直接把内存中的数据保存到一个 dump 的文件中，定时保存，保存策略。")]),t._v(" "),s("li",[t._v("**AOF：**把所有的对 Redis 的服务器进行修改的命令都存到一个文件里，命令的集合。Redis 默认是快照 RDB 的持久化方式。")])]),t._v(" "),s("p",[t._v("当 Redis 重启的时候，它会优先使用 AOF 文件来还原数据集，因为 AOF 文件保存的数据集通常比 RDB 文件所保存的数据集更完整。你甚至可以关闭持久化功能，让数据只在服务器运行时存。")]),t._v(" "),s("h3",{attrs:{id:"rdb持久化策略"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#rdb持久化策略"}},[t._v("#")]),t._v(" RDB持久化策略")]),t._v(" "),s("p",[t._v('默认 Redis 是会以快照"RDB"的形式将数据持久化到磁盘的一个二进制文件 dump.rdb。')]),t._v(" "),s("p",[t._v("工作原理简单说一下：当 Redis 需要做持久化时，Redis 会 fork 一个子进程，子进程将数据写到磁盘上一个临时 RDB 文件中。")]),t._v(" "),s("p",[t._v("当子进程完成写临时文件后，将原来的 RDB 替换掉，这样的好处是可以 copy-on-write。")]),t._v(" "),s("p",[t._v("**RDB **的优点是：这种文件非常适合用于备份：比如，你可以在最近的 24 小时内，每小时备份一次，并且在每个月的每一天也备份一个 RDB 文件。")]),t._v(" "),s("p",[t._v("这样的话，即使遇上问题，也可以随时将数据集还原到不同的版本。RDB 非常适合灾难恢复。")]),t._v(" "),s("p",[t._v("RDB 的缺点是：如果你需要尽量避免在服务器故障时丢失数据，那么RDB不合适你。")]),t._v(" "),s("h3",{attrs:{id:"aof持久化策略"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#aof持久化策略"}},[t._v("#")]),t._v(" AOF持久化策略")]),t._v(" "),s("p",[t._v("用 AOF 做持久化，每一个写命令都通过 write 函数追加到 appendonly.aof 中，配置方式如下：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("appendfsync yes   \nappendfsync always     #每次有数据修改发生时都会写入AOF文件。\nappendfsync everysec   #每秒钟同步一次，该策略为AOF的缺省策略。\n")])])]),s("p",[t._v("AOF 可以做到全程持久化，只需要在配置中开启 appendonly yes。这样 Redis 每执行一个修改数据的命令，都会把它添加到 AOF 文件中，当 Redis 重启时，将会读取 AOF 文件进行重放，恢复到 Redis 关闭前的最后时刻。")]),t._v(" "),s("p",[t._v("我顿了一下，继续说：使用 AOF 的优点是会让 Redis 变得非常耐久。可以设置不同的 Fsync 策略，AOF的默认策略是每秒钟 Fsync 一次，在这种配置下，就算发生故障停机，也最多丢失一秒钟的数据。")]),t._v(" "),s("p",[t._v("缺点是对于相同的数据集来说，AOF 的文件体积通常要大于 RDB 文件的体积。根据所使用的 Fsync 策略，AOF 的速度可能会慢于 RDB。")]),t._v(" "),s("h3",{attrs:{id:"rdb和aof持久化策略的选择选择"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#rdb和aof持久化策略的选择选择"}},[t._v("#")]),t._v(" RDB和AOF持久化策略的选择选择")]),t._v(" "),s("p",[t._v("如果你非常关心你的数据，但仍然可以承受数分钟内的数据丢失，那么可以只使用 RDB 进行持久化。")]),t._v(" "),s("p",[t._v("AOF 将 Redis 执行的每一条命令追加到磁盘中，处理巨大的写入会降低Redis的性能，不知道你是否可以接受。")]),t._v(" "),s("p",[t._v("数据库备份和灾难恢复：定时生成 RDB 快照非常便于进行数据库备份，并且 RDB 恢复数据集的速度也要比 AOF 恢复的速度快。")]),t._v(" "),s("p",[t._v("当然了，Redis 支持同时开启 RDB 和 AOF，系统重启后，Redis 会优先使用 AOF 来恢复数据，这样丢失的数据会最少。")]),t._v(" "),s("h2",{attrs:{id:"redis-主从复制的过程和原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redis-主从复制的过程和原理"}},[t._v("#")]),t._v(" Redis 主从复制的过程和原理")]),t._v(" "),s("p",[t._v("主从配置结合哨兵模式能解决单点故障问题，提高 Redis 可用性。")]),t._v(" "),s("p",[t._v("从节点仅提供读操作，主节点提供写操作。对于读多写少的状况，可给主节点配置多个从节点，从而提高响应效率。")]),t._v(" "),s("ul",[s("li",[t._v("从节点执行 slaveof [masterIP] [masterPort]，保存主节点信息。")]),t._v(" "),s("li",[t._v("从节点中的定时任务发现主节点信息，建立和主节点的 Socket 连接。")]),t._v(" "),s("li",[t._v("从节点发送 Ping 信号，主节点返回 Pong，两边能互相通信。")]),t._v(" "),s("li",[t._v("连接建立后，主节点将所有数据发送给从节点（数据同步）。")]),t._v(" "),s("li",[t._v("主节点把当前的数据同步给从节点后，便完成了复制的建立过程。接下来，主节点就会持续的把写命令发送给从节点，保证主从数据一致性。")])]),t._v(" "),s("h2",{attrs:{id:"redis数据同步过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redis数据同步过程"}},[t._v("#")]),t._v(" Redis数据同步过程")]),t._v(" "),s("p",[t._v("Redis 2.8 之前使用 "),s("code",[t._v("sync [runId] [offset]")]),t._v("同步命令，Redis 2.8 之后使用 "),s("code",[t._v("psync [runId] [offset]")]),t._v("命令。两者不同在于，"),s("code",[t._v("sync")]),t._v(" 命令仅支持全量复制过程，"),s("code",[t._v("psync")]),t._v(" 支持全量和部分复制。")]),t._v(" "),s("h2",{attrs:{id:"主从复制会存在的问题以及解决方案"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#主从复制会存在的问题以及解决方案"}},[t._v("#")]),t._v(" 主从复制会存在的问题以及解决方案")]),t._v(" "),s("h3",{attrs:{id:"主从复制存在的问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#主从复制存在的问题"}},[t._v("#")]),t._v(" 主从复制存在的问题")]),t._v(" "),s("p",[t._v("主从复制会存在以下问题：")]),t._v(" "),s("ul",[s("li",[t._v("一旦主节点宕机，从节点晋升为主节点，同时需要修改应用方的主节点地址，还需要命令所有从节点去复制新的主节点，整个过程需要人工干预。")]),t._v(" "),s("li",[t._v("主节点的写能力受到单机的限制。")]),t._v(" "),s("li",[t._v("主节点的存储能力受到单机的限制。")]),t._v(" "),s("li",[t._v("原生复制的弊端在早期的版本中也会比较突出，比如：Redis 复制中断后，从节点会发起 psync。此时如果同步不成功，则会进行全量同步，主库执行全量备份的同时，可能会造成毫秒或秒级的卡顿。")])]),t._v(" "),s("h3",{attrs:{id:"哨兵解决主从复制问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#哨兵解决主从复制问题"}},[t._v("#")]),t._v(" 哨兵解决主从复制问题")]),t._v(" "),s("p",[t._v("主从复制问题可以使用哨兵进行解决。Redis Sentinel 最小配置是一主一从。Redis 的 Sentinel 系统可以用来管理多个 Redis 服务器。")]),t._v(" "),s("p",[t._v("该系统可以执行以下四个任务：")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("监控")]),t._v(" ：不断检查主服务器和从服务器是否正常运行。")]),t._v(" "),s("li",[s("strong",[t._v("通知")]),t._v(" ：当被监控的某个 Redis 服务器出现问题，Sentinel 通过 API 脚本向管理员或者其他应用程序发出通知。")]),t._v(" "),s("li",[s("strong",[t._v("自动故障转移")]),t._v(" ：当主节点不能正常工作时，Sentinel 会开始一次自动的故障转移操作，它会将与失效主节点是主从关系的其中一个从节点升级为新的主节点，并且将其他的从节点指向新的主节点，这样人工干预就可以免了。")]),t._v(" "),s("li",[s("strong",[t._v("配置提供者")]),t._v("：在 Redis Sentinel 模式下，客户端应用在初始化时连接的是 Sentinel 节点集合，从中获取主节点的信息。")])]),t._v(" "),s("h3",{attrs:{id:"哨兵的工作原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#哨兵的工作原理"}},[t._v("#")]),t._v(" 哨兵的工作原理")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("每个 Sentinel 节点都需要定期执行以下任务：每个 Sentinel 以每秒一次的频率，向它所知的主服务器、从服务器以及其他的 Sentinel 实例发送一个 PING 命令。")])]),t._v(" "),s("li",[s("p",[t._v("如果一个实例距离最后一次有效回复 PING 命令的时间超过 "),s("code",[t._v("down-after-milliseconds")]),t._v("所指定的值，那么这个实例会被 Sentinel 标记为主观下线。")])]),t._v(" "),s("li",[s("p",[t._v("如果一个主服务器被标记为主观下线，那么正在监视这个服务器的所有 Sentinel 节点，要以每秒一次的频率确认主服务器的确进入了主观下线状态。")])]),t._v(" "),s("li",[s("p",[t._v("如果一个主服务器被标记为主观下线，并且有足够数量的 Sentinel（至少要达到配置文件指定的数量）在指定的时间范围内同意这一判断，那么这个主服务器被标记为客观下线。")])]),t._v(" "),s("li",[s("p",[t._v("一般情况下，每个 Sentinel 会以每 10 秒一次的频率向它已知的所有主服务器和从服务器发送 INFO 命令。")]),t._v(" "),s("p",[t._v("当一个主服务器被标记为客观下线时，Sentinel 向下线主服务器的所有从服务器发送 INFO 命令的频率，会从 10 秒一次改为每秒一次。")])]),t._v(" "),s("li",[s("p",[t._v("Sentinel 和其他 Sentinel 协商客观下线的主节点的状态，如果处于 SDOWN 状态，则投票自动选出新的主节点，将剩余从节点指向新的主节点进行数据复制。")])]),t._v(" "),s("li",[s("p",[t._v("当没有足够数量的 Sentinel 同意主服务器下线时，主服务器的客观下线状态就会被移除。当主服务器重新向 Sentinel 的 PING 命令返回有效回复时，主服务器的主观下线状态就会被移除。")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);