(window.webpackJsonp=window.webpackJsonp||[]).push([[72],{720:function(t,r,e){"use strict";e.r(r);var v=e(74),n=Object(v.a)({},(function(){var t=this,r=t._self._c;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h2",{attrs:{id:"设计模式的概念"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#设计模式的概念"}},[t._v("#")]),t._v(" 设计模式的概念")]),t._v(" "),r("p",[t._v("设计模式（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。")]),t._v(" "),r("h2",{attrs:{id:"设计模式的类型"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#设计模式的类型"}},[t._v("#")]),t._v(" 设计模式的类型")]),t._v(" "),r("p",[t._v("模式可以分为三大类：创建型模式（Creational Patterns）、结构型模式（Structural Patterns）、行为型模式（Behavioral Patterns）。当然，我们还会讨论另一类设计模式：J2EE 设计模式。")]),t._v(" "),r("table",[r("thead",[r("tr",[r("th",[r("strong",[t._v("模式 & 描述")])]),t._v(" "),r("th",[r("strong",[t._v("包括")])])])]),t._v(" "),r("tbody",[r("tr",[r("td",[r("strong",[t._v("创建型模式")]),r("br"),t._v("这些设计模式提供了一种在创建对象的同时隐藏创建逻辑的方式，"),r("br"),t._v("而不是使用 new 运算符直接实例化对象。")]),t._v(" "),r("td",[t._v("工厂模式（Factory Pattern）"),r("br"),t._v("抽象工厂模式（Abstract Factory Pattern） "),r("br"),t._v("单例模式（Singleton Pattern）"),r("br"),t._v("建造者模式（Builder Pattern） "),r("br"),t._v("原型模式（Prototype Pattern）")])]),t._v(" "),r("tr",[r("td",[r("strong",[t._v("结构型模式")]),t._v(" "),r("br"),t._v("这些设计模式关注类和对象的组合。"),r("br"),t._v("继承的概念被用来组合接口和定义组合对象获得新功能的方式。")]),t._v(" "),r("td",[t._v("适配器模式（Adapter Pattern）"),r("br"),t._v("桥接模式（Bridge Pattern）"),r("br"),t._v("过滤器模式（Filter、Criteria Pattern）"),r("br"),t._v("组合模式（Composite Pattern） "),r("br"),t._v("装饰器模式（Decorator Pattern） "),r("br"),t._v("外观模式（Facade Pattern）"),r("br"),t._v("享元模式（Flyweight Pattern） "),r("br"),t._v("代理模式（Proxy Pattern）")])]),t._v(" "),r("tr",[r("td",[r("strong",[t._v("行为型模式")]),r("br"),t._v("这些设计模式特别关注对象之间的通信。")]),t._v(" "),r("td",[t._v("责任链模式（Chain of Responsibility Pattern）"),r("br"),t._v("命令模式（Command Pattern） "),r("br"),t._v("解释器模式（Interpreter Pattern）"),r("br"),t._v("迭代器模式（Iterator Pattern）"),r("br"),t._v("中介者模式（Mediator Pattern）"),r("br"),t._v("备忘录模式（Memento Pattern）"),r("br"),t._v("观察者模式（Observer Pattern）"),r("br"),t._v("状态模式（State Pattern） "),r("br"),t._v("空对象模式（Null Object Pattern） "),r("br"),t._v("策略模式（Strategy Pattern） "),r("br"),t._v("模板模式（Template Pattern） "),r("br"),t._v("访问者模式（Visitor Pattern）")])]),t._v(" "),r("tr",[r("td",[r("strong",[t._v("J2EE 模式")]),r("br"),t._v("这些设计模式特别关注表示层。这些模式是由 Sun Java Center 鉴定的。")]),t._v(" "),r("td",[t._v("MVC 模式（MVC Pattern） "),r("br"),t._v("业务代表模式（Business Delegate Pattern）"),r("br"),t._v("组合实体模式（Composite Entity Pattern）"),r("br"),t._v("数据访问对象模式（Data Access Object Pattern）"),r("br"),t._v("前端控制器模式（Front Controller Pattern）"),r("br"),t._v("拦截过滤器模式（Intercepting Filter Pattern） "),r("br"),t._v("服务定位器模式（Service Locator Pattern）"),r("br"),t._v("传输对象模式（Transfer Object Pattern）")])])])]),t._v(" "),r("h2",{attrs:{id:"设计模式六大原则"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#设计模式六大原则"}},[t._v("#")]),t._v(" 设计模式六大原则")]),t._v(" "),r("p",[r("strong",[t._v("1、开闭原则（Open Close Principle）")])]),t._v(" "),r("p",[t._v("开闭原则的意思是："),r("strong",[t._v("对扩展开放，对修改关闭")]),t._v("。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。简言之，是为了使程序的扩展性好，易于维护和升级。")]),t._v(" "),r("p",[r("strong",[t._v("2、里氏代换原则（Liskov Substitution Principle）")])]),t._v(" "),r("p",[t._v("里氏代换原则是面向对象设计的基本原则之一。 里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。LSP 是继承复用的基石，只有当派生类可以替换掉基类，且软件单位的功能不受到影响时，基类才能真正被复用，而派生类也能够在基类的基础上增加新的行为。里氏代换原则是对开闭原则的补充。实现开闭原则的关键步骤就是抽象化，而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。")]),t._v(" "),r("p",[r("strong",[t._v("3、依赖倒转原则（Dependence Inversion Principle）")])]),t._v(" "),r("p",[t._v("这个原则是开闭原则的基础，具体内容：针对接口编程，依赖于抽象而不依赖于具体。")]),t._v(" "),r("p",[r("strong",[t._v("4、接口隔离原则（Interface Segregation Principle）")])]),t._v(" "),r("p",[t._v("这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。它还有另外一个意思是：降低类之间的耦合度。由此可见，其实设计模式就是从大型软件架构出发、便于升级和维护的软件设计思想，它强调降低依赖，降低耦合。")]),t._v(" "),r("p",[r("strong",[t._v("5、迪米特法则，又称最少知道原则（Demeter Principle）")])]),t._v(" "),r("p",[t._v("最少知道原则是指：一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立。")]),t._v(" "),r("p",[r("strong",[t._v("6、合成复用原则（Composite Reuse Principle）")])]),t._v(" "),r("p",[t._v("合成复用原则是指：尽量使用合成/聚合的方式，而不是使用继承。")])])}),[],!1,null,null,null);r.default=n.exports}}]);