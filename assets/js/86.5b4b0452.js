(window.webpackJsonp=window.webpackJsonp||[]).push([[86],{736:function(a,t,v){"use strict";v.r(t);var s=v(74),_=Object(s.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h2",{attrs:{id:"准备工作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#准备工作"}},[a._v("#")]),a._v(" 准备工作")]),a._v(" "),t("p",[a._v("闲话少说，现在我们开始学习第一个反向代理实例，在这个实例中，我们需要实现这样的效果：打开浏览器，在浏览器地址栏输入地址 www.123.com ，跳转到 liunx 系统 tomcat 主页面中。")]),a._v(" "),t("ol",[t("li",[t("p",[a._v("安装并启动Tomcat服务器；在Linux系统中安装并以默认端口8080启动Tomcat服务器。")])]),a._v(" "),t("li",[t("p",[a._v("开放对外访问的端口")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("firewall cmd "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("add")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("port")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("80")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("80")]),a._v("/tcp permanent\n")])])])]),a._v(" "),t("li",[t("p",[a._v("重新加载防火墙配置")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("firewall cmd reload\n")])])])])]),a._v(" "),t("p",[a._v("2）具体配置")]),a._v(" "),t("ol",[t("li",[t("p",[a._v("在Windows配置文件中配置ip和域名的对应关系")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("ip")]),a._v(" www.123.com\n")])])])]),a._v(" "),t("li",[t("p",[a._v("配置Nginx")]),a._v(" "),t("div",{staticClass:"language-nginx extra-class"},[t("pre",{pre:!0,attrs:{class:"language-nginx"}},[t("code",[a._v("\n")])])])])]),a._v(" "),t("p",[a._v("接下来，我们开始学习第二个反向代理实例，该实例需要实现这样的效果：使用 nginx 反向代理，根据访问的路径跳转到不同端口的服务中nginx 监听端口为 9001。在这个实例中，我们需要部署两个Tomcat服务器，")]),a._v(" "),t("p",[a._v("当访问"),t("code",[a._v("http:// ip:9001/edu/")]),a._v("时，直接跳转到"),t("code",[a._v("127.0.0.1:8080")]),a._v("，访问"),t("code",[a._v("http:// ip:9001/vod/")]),a._v("直接跳转到"),t("code",[a._v("127.0.0.1:8081")]),a._v("。")]),a._v(" "),t("p",[a._v("1）准备工作")]),a._v(" "),t("ol",[t("li",[t("p",[a._v("准备两个 tomcat 服务器，一个8080端口，一个8081端口")])]),a._v(" "),t("li",[t("p",[a._v("创建文件夹和测试页面，在使用8080端口的Tomcat服务器的"),t("code",[a._v("webapps")]),a._v("目录中，创建"),t("code",[a._v("edu")]),a._v("目录，并在目录中创建"),t("code",[a._v("a.html")]),a._v("。同理，在")]),a._v(" "),t("p",[a._v("在使用8081端口的Tomcat服务器的"),t("code",[a._v("webapps")]),a._v("目录中，创建"),t("code",[a._v("vod")]),a._v("目录，并在目录中创建"),t("code",[a._v("a.html")])])])]),a._v(" "),t("p",[a._v("2）具体配置")]),a._v(" "),t("ol",[t("li",[a._v("对Nginx配置文件进行配置")]),a._v(" "),t("li",[a._v("开放对外访问的9001、 8080、 8081端口")])]),a._v(" "),t("h2",{attrs:{id:"负载均衡"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#负载均衡"}},[a._v("#")]),a._v(" 负载均衡")]),a._v(" "),t("p",[a._v("接下来，我们开始实现Nginx一个负载均衡配置例子。在这个例子中需要实现这样的效果：浏览器地址栏输入地址 http://ip/edu/a.html ，负载均衡效果，平均8080和 8081 端口中。")]),a._v(" "),t("p",[a._v("1）准备工作")]),a._v(" "),t("ol",[t("li",[a._v("准备两台 tomcat 服务器，一台 8080 ，一台 8081。")]),a._v(" "),t("li",[a._v("在两台 tomcat 里面 webapps 目录中，创建名称是 edu 文件夹，在 edu 文件夹中创建页面 a.html ，用于测试。")])]),a._v(" "),t("p",[a._v("2）具体配置")]),a._v(" "),t("p",[a._v("3）Nginx负载均衡方式")]),a._v(" "),t("ol",[t("li",[a._v("第一种 轮询（默认）：每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器 down 掉，能自动剔除。")]),a._v(" "),t("li",[a._v("第二种 weight：weight 代表权重默认为 1, 权重越高被分配的客户端越多")]),a._v(" "),t("li",[a._v("第三种 ip_hash：每个请求按访问 ip 的 hash 结果分配，这样每个访客固定访问一个后端服务器")]),a._v(" "),t("li",[a._v("第四种 fair （第三方）：按后端服务器的响应时间来分配请求，响应时间短的优先分配。")])]),a._v(" "),t("h2",{attrs:{id:"动静分离"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#动静分离"}},[a._v("#")]),a._v(" 动静分离")]),a._v(" "),t("h2",{attrs:{id:"高可用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#高可用"}},[a._v("#")]),a._v(" 高可用")])])}),[],!1,null,null,null);t.default=_.exports}}]);