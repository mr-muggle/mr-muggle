(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{663:function(t,v,_){"use strict";_.r(v);var a=_(74),e=Object(a.a)({},(function(){var t=this,v=t._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h2",{attrs:{id:"消息队列"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#消息队列"}},[t._v("#")]),t._v(" 消息队列")]),t._v(" "),v("p",[t._v("所谓的 "),v("code",[t._v("消息队列")]),t._v("，是指通过利用高效可靠的消息传递机制进行平台无关的数据交流，并基于数据通信来进行分布式系统的集成。其构建了一个典型的 "),v("code",[t._v("生产者")]),t._v("和"),v("code",[t._v("消费者")]),t._v("模型,生产者不断向消息队列中生产消息，消费者不断的从队列中获取消息。因为消息的生产和消费都是异步的，而且只关心消息的发送和接收，没有业务逻辑的侵入,轻松的实现系统间解耦。别名为 "),v("code",[t._v("消息中间件")])]),t._v(" "),v("p",[t._v("总之，"),v("strong",[t._v("消息队列 (Message Queue Middleware，简称MQ)，是指利用高效可靠的消息传递机制进行与平台无关的数据交流，并基于数据通信来进行分布式系统的集成。"),v("strong",[t._v("这当中的")]),t._v("消息（Message）")]),t._v(" 是指在应用间传递的数据。消息的形式多样，可以是只包含文本的字符串、可以是Json，也可以是很复杂的对象。")]),t._v(" "),v("h2",{attrs:{id:"消息队列传递模式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#消息队列传递模式"}},[t._v("#")]),t._v(" 消息队列传递模式")]),t._v(" "),v("p",[t._v("消息队列中间件，它一般有两种传递模式："),v("strong",[t._v("点对点（P2P，Point-to-Point）模式")]),t._v(" 和 "),v("strong",[t._v("发布订阅（Pub/Sub）模式")]),t._v(" 。")]),t._v(" "),v("ul",[v("li",[v("strong",[t._v("点对点（P2P，Point-to-Point）模式")]),t._v(" ：点对点模式是基于队列的，消息生产者发送消息到队列，消息消费者从队列中接收消息，队列的存在使得消息的异步传输成为可能。")]),t._v(" "),v("li",[v("strong",[t._v("发布订阅（Pub/Sub）模式")]),t._v(" ：发布订阅模式定义了向一个内容节点发布和订阅消息，这个内容节点成为"),v("strong",[t._v("主题（topic）")]),t._v("，主题可以认为是消息传递的中介，消息发布者将消息发布到某个主题，而消息订阅者则从主题中订阅消息。"),v("em",[t._v("主题使得消息的订阅者和消息的发布者保持独立，不需要进行接触即可保证消息的传递，发布订阅模式在消息的一对多广播时采用。")])])]),t._v(" "),v("p",[t._v("目前比较流行的消息中间件有RabbitMQ、Kafka、ActiveMQ、RocketMQ等。它们提供了基于存储与转发的应用程序之间的异步数据发送，即应用程序彼此之间不直接通信，而是与作为中介的消息中间件通信。消息中间件提供了有保证的消息发送，应用程序开发人员无需了解远程调用过程（RPC）和网络通信协议的细节。")]),t._v(" "),v("h2",{attrs:{id:"消息队列的种类"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#消息队列的种类"}},[t._v("#")]),t._v(" 消息队列的种类")]),t._v(" "),v("p",[t._v("当今市面上有很多主流的消息中间件，如老牌的"),v("code",[t._v("ActiveMQ")]),t._v("、"),v("code",[t._v("RabbitMQ")]),t._v("，炙手可热的"),v("code",[t._v("Kafka")]),t._v("，阿里巴巴自主开发"),v("code",[t._v("RocketMQ")]),t._v("等。")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("消息队列")]),t._v(" "),v("th",[t._v("特点")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("ActiveMQ")]),t._v(" "),v("td",[t._v("ActiveMQ 是Apache出品，最流行的，能力强劲的开源消息总线。它是一个完全支持JMS规范的的消息中间件。丰富的API,多种集群架构模式让ActiveMQ在业界成为老牌的消息中间件,在中小型企业颇受欢迎!")])]),t._v(" "),v("tr",[v("td",[t._v("Kafka")]),t._v(" "),v("td",[t._v("Kafka是LinkedIn开源的分布式发布-订阅消息系统，目前归属于Apache顶级项目。Kafka主要特点是基于Pull的模式来处理消息消费，追求高吞吐量，一开始的目的就是用于日志收集和传输。0.8版本开始支持复制，不支持事务，对消息的重复、丢失、错误没有严格要求，适合产生大量数据的互联网服务的数据收集业务。")])]),t._v(" "),v("tr",[v("td",[t._v("RocketMQ")]),t._v(" "),v("td",[t._v("RocketMQ是阿里开源的消息中间件，它是纯Java开发，具有高吞吐量、高可用性、适合大规模分布式系统应用的特点。RocketMQ思路起源于Kafka，但并不是Kafka的一个Copy，它对消息的可靠传输及事务性做了优化，目前在阿里集团被广泛应用于交易、充值、流计算、消息推送、日志流式处理、binglog分发等场景。")])]),t._v(" "),v("tr",[v("td",[t._v("RabbitMQ")]),t._v(" "),v("td",[t._v("RabbitMQ是使用Erlang语言开发的开源消息队列系统，基于AMQP协议来实现。AMQP的主要特征是面向消息、队列、路由（包括点对点和发布/订阅）、可靠性、安全。AMQP协议更多用在企业系统内对数据一致性、稳定性和可靠性要求很高的场景，对性能和吞吐量的要求还在其次。"),v("strong",[t._v("RabbitMQ比Kafka可靠，Kafka更适合IO高吞吐的处理，一般应用在大数据日志处理或对实时性（少量延迟），可靠性（少量丢数据）要求稍低的场景使用，比如ELK日志收集。")])])])])])])}),[],!1,null,null,null);v.default=e.exports}}]);